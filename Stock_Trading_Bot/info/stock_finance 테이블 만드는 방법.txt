# 1. collector_api.py 파일에 아래 함수 추가

    # stock_finance 테이블을 만드는 함수
    def _create_stock_finance(self):
        table_name = 'stock_finance'

        # stock_item_all 에 저장된 모든 종목의 code를 가져온다.
        stock_codes = self.open_api.engine_daily_buy_list.execute("""
            SELECT code FROM stock_item_all
        """).fetchall()

        # stock_codes 에 있는 종목코드를 stock_codes_list에 넣는다.
        stock_codes_list = []
        for row in stock_codes:
            stock_codes_list.append(row['code'])

        # 위 3줄을 한 줄로 표현 하면 아래와 같이 대체 가능(list comprehension)
        # stock_codes_list = [row['code'] for row in stock_codes]

        # 키움 API에서 전달 받은 한글 key값을 영어로 바꿔서 테이블 칼럼명으로 설정 하기 위함
        column_names = {
            '종목코드': 'code', '결산월': 'settlement_month', '액면가': 'par_value', '자본금': 'capital_stock',
            '상장주식': 'listed_stock', '신용비율': 'credit_rate', '연중최고': 'year_highest', '연중최저': 'year_lowest',
            '시가총액': 'market_cap', '외인소진률': 'foreign_rate', '대용가': 'sub_price',
            '매출액': 'gross_profit', '영업이익': 'operation_income', '당기순이익': 'net_income', '250최고': '250highest',
            '250최저': '250lowest', '상한가': 'upper_limit', '하한가': 'lower_limit', '기준가': 'standard_price',
            '250최고가일': '250highest_date', '250최저가일': '250lowest_date', '250최저가대비율': '250lowest_rate',
            '거래대비': 'trading_rate', '유통주식': 'outstanding_stock', '유통비율': 'outstanding_rate', 'PER': 'PER',
            'PBR': 'PBR', 'EV': 'EV', 'BPS': 'BPS', 'EPS': 'EPS', 'ROE': 'ROE'
        }

        # column_names 에 있는 key 중 Text 형으로 저장 해야 할 리스트
        text_columns = ['종목코드', '결산월', '250최고가일', '250최저가일']
        # +, -기호가 추세를 나타내는 칼럼 (영상 촬영 후 추가)
        signed_columns = ['거래대비', '기준가', '하한가', '250최고', '250최저', '연중최고', '연중최저', '신용비율', '외인소진률']
        dtype = {}
        for k, v in column_names.items():  # 각 칼럼별 자료형 타입을 정한다. 아래 df.to_sql 에서 활용
            if k in text_columns:
                dtype[v] = Text  # text_columns 에 속한 key는 Text 형으로 저장
            else:
                dtype[v] = Float  # text_columns 에 속하지 않는 key는 Float 형으로 저장

        # 현재 stock_finance에 저장한 데이터 가져오기(중복 체크를 위해)
        # 만약 table_name('stock_finance') 가 daily_buy_list DB에 존재한다면 IF문 안으로 들어간다.
        existing_data = {}

        # (영상 촬영 후 아래 세 라인 추가) 모든 데이터 존재 여부를 파악하는게 아닌 10일치만 비교하기 위함
        strformat = "%Y%m%d"
        extract_from = datetime.date.today() - timedelta(days=10)
        extract_from = extract_from.strftime(strformat)

        if self.open_api.engine_daily_buy_list.dialect.has_table(self.open_api.engine_daily_buy_list, table_name):
            existing_data = self.open_api.engine_daily_buy_list.execute(f"""
                SELECT date, code FROM {table_name} WHERE date >= {extract_from}
            """).fetchall()

        today = datetime.date.today().strftime(strformat)

        data = defaultdict(list)  # collections.defaultdict

        chunk_size = 83  # 83개씩 데이터를 쌓아서 DB에 넣기 위함
        if cf.max_api_call - 2 < chunk_size:  # max_api_call -2 값이 chunk_size 보다 작은 값인 경우 chunk_size 조정
            chunk_size = cf.max_api_call - 2

        item_count = 0  # 실질적으로 DB에 넣는 아이템 갯수를 기록
        for i, c in enumerate(stock_codes_list):  # index를 얻기위해 enumerate() 사용
            if (today, c) in existing_data:  # 이미 stock_finance에 넣은 데이터는 중복해서 넣지 않도록
                continue
            today = datetime.date.today().strftime(strformat)
            data['date'].append(today)  # 날짜 칼럼 추가
            fin_data = self.open_api.get_stock_finance(c)
            for k, v in fin_data.items():
                if v == '':  # 영상 촬영 후 추가되었습니다. 비어있는 문자열일 경우 None으로 대체
                    converted = None
                elif v and (k in signed_columns):  # v(value)가 존재하고, signed_columns(영상 촬영 후 수정)에 fin_data의 k(key)가 있으면
                    converted = abs(float(v))  # +, -기호가 추세를 나타낼 경우 떼기 위함
                else:
                    converted = v
                # dict의 get() : 딕셔너리의 key 값에 해당하는 value 값을 가져온다.
                data[column_names.get(k, k)].append(converted)
            logger.debug(f'{c} 금융 데이터 요청중...')

            if item_count == chunk_size or i == len(stock_codes_list) - 1:  # chunk_size 단위로 저장 83개는 max_api_call 999에 최적화
                df = DataFrame.from_dict(data)
                logger.debug('DB에 넣는 중...')
                logger.debug(df)
                df.to_sql(
                    table_name, self.open_api.engine_daily_buy_list, if_exists='append', index=False, dtype=dtype
                )
                data = defaultdict(list)
                item_count = 0

            item_count += 1

2. collector_api.py 파일의 상단에 아래 코드 추가(테이블 칼럼 자료형 설정에 사용)
from sqlalchemy import Integer, Text, Float


3. (영상 촬영 후 수정 되었습니다.)
    콜렉터에서 _create_stock_finance 함수 호출하도록 구현하기 위해
    collector_api.py 의 code_update_check 함수의

    if rows[0][6] != self.open_api.today:
        self.realtime_daily_buy_list_check()

    로직 위에 아래와 같이 self._create_stock_finance() 추가. (if와 같은 라인)

    self._create_stock_finance()

    if rows[0][6] != self.open_api.today:
        self.realtime_daily_buy_list_check()



